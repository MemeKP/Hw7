public class BSTree extends BTreePrinter{
  Node root;
    
  public void singleRotateFromLeft(Node y) {
      if (y == null || y.left == null) {
            return;
        }
        Node x = y.left;
        Node w = y.parent;
        
        y.left = x.right;
        if (y.left != null) {
            y.left.parent = y;
        }
        
        x.right = y;
        y.parent = x;
        
        if (w != null) {
            if (w.left == y) {
                w.left = x;  // x becomes the left child of w
            } else {
                w.right = x;  // x becomes the right child of w
            }
            x.parent = w;  // update x's parent to w
        } else { //y is root
            root = x;
            x.parent = null;
        }
  }

  public void singleRotateFromRight(Node y) {
      if (y == null || y.right == null) {
            return;
        }
        Node x = y.right;
        Node w = y.parent;
        
        y.right = x.left;
        if (y.right != null) {
            y.right.parent = y;
        }
        
        x.left = y;
        y.parent = x;
        
        if (w != null) {
            if (w.right == y) {
                w.right = x;  // x becomes the right child of w
            } else {
                w.left = x;  // x becomes the left child of w
            }
            x.parent = w;  // update x's parent to w
        } else { // y is the root
            root = x;
            x.parent = null;
        }
  }
  
  public void insertKey(int key) {
      if (root == null) {
          root = new Node(key);
      } else {
          Main.insertKey(root, key);
      }
  }
  
  public void printTree() {
      if (root == null) {
          System.out.println("Empty tree!!!");
      } else {
          super.printTree(root);
      }
  }

  public Node findKey(int search_key) {
      return Main.findKey(root, search_key);
  }
}
