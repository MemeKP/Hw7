public class BSTree extends BTreePrinter{
    Node root;
      
    public void doubleRotateFromLeft(Node y) {
        if (y == null || y.left == null || y.left.right == null) {
            return;
        }
        
        Node x = y.left;
        Node z = x.right;
        Node w = y.parent;
        
        // Step 1: Right rotation on y.left (x)
        x.right = z.left;
        if (x.right != null) {
            x.right.parent = x; // Update parent reference of the moved subtree
        }
        
        z.left = x;
        x.parent = z;
        
        // Step 2: Left rotation on y
        y.left = z.right;
        if (y.left != null) {
            y.left.parent = y; // Update parent reference
        }
        z.right = y;
        y.parent = z;

        // Update parent references
        if (w != null) {
            if (w.left == y) {
                w.left = z;
            } else {
                w.right = z;
            }
            z.parent = w;
        } else {
            root = z;
            z.parent = null;
        }
    }

    public void doubleRotateFromRight(Node y) {
        if (y == null || y.right == null || y.right.left == null) {
            return;
        }

        Node x = y.right;  // Right child of y
        Node z = x.left;   // Left child of x (this will become the new root of this subtree)
        Node w = y.parent; // Parent of y

        // Step 1: Left rotation on y.right (x)
        x.left = z.right;
        if (x.left != null) {
            x.left.parent = x; // Update parent reference of the moved subtree
        }

        z.right = x;
        x.parent = z;

        // Step 2: Right rotation on y
        y.right = z.left;
        if (y.right != null) {
            y.right.parent = y; // Update parent reference
        }

        z.left = y;
        y.parent = z;

        // Update parent references
        if (w != null) {
            if (w.right == y) {
                w.right = z;
            } else {
                w.left = z;
            }
            z.parent = w;
        } else {
            root = z;
            z.parent = null;
        }
    }
    
    public void insertKey(int key) {
        if (root == null) {
            root = new Node(key);
        } else {
            Main.insertKey(root, key);
        }
    }
    
    public void printTree() {
        if (root == null) {
            System.out.println("Empty tree!!!");
        } else {
            super.printTree(root);
        }
    }

    public Node findKey(int search_key) {
        return Main.findKey(root, search_key);
    }
}
