public class BSTree2 extends BTreePrinter{
    Node root;
    
    // Implement this function using iterative method
    // Do not use recursion
    public Node findKey(int search_key){
        Node current = root;
        while (current != null) {
            if (current.key == search_key) {
                return current; // Key found
            } else if (search_key < current.key) {
                current = current.left; // Move left
            } else {
                current = current.right; // Move right
            }
        }
        return null;
    }

    // Implement this function using iterative method
    // Do not use recursion
    public Node findMin(){
        if (root == null) {
            return null; // Tree is empty
        }
        Node current = root;
        while (current.left != null) {
            current = current.left; // Move to the leftmost node
        }
        return current;
    }

    // Implement this function using iterative method
    // Do not use recursion
    public Node findMax(){
        if (root == null) {
            return null; // Tree is empty
        }
        Node current = root;
        while (current.right != null) {
            current = current.right; // Move to the rightmost node
        }
        return current;
    }
    
    // Implement this function using iterative method
    // Do not use recursion
    public void insertKey(int key) {
        Node newNode = new Node(key); // Create a new node
        if (root == null) {
            root = newNode; // Tree is empty, set new node as root
            return;
        }
        Node current = root;
        Node parent = null;
        while (current != null) {
            parent = current;
            if (key < current.key) {
                current = current.left; // Move left
            } else {
                current = current.right; // Move right
            }
        }
        // Attach the new node to the parent
        if (key < parent.key) {
            parent.left = newNode;
        } else {
            parent.right = newNode;
        }
    }
    
    // This function is complete, no need to edit
    public void printTree() {
        if (root == null) {
            System.out.println("Empty tree!!!");
        } else {
            super.printTree(root);
        }
    }
}
