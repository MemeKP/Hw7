public class AVLTree extends BTreePrinter{
    Node root;

    public void singleRotateFromLeft(Node y) {
        if (y == null || y.left == null) {
            return;
        }
        Node x = y.left;
        Node w = y.parent;
        
        y.left = x.right;
        if (y.left != null) {
            y.left.parent = y;
        }
        
        x.right = y;
        y.parent = x;
        
        if (w != null) {
            if (w.left == y) {
                w.left = x;  // x becomes the left child of w
            } else {
                w.right = x;  // x becomes the right child of w
            }
            x.parent = w;  // update x's parent to w
        } else { //y is root
            root = x;
            x.parent = null;
        }
    }

    public void singleRotateFromRight(Node y) {
       if (y == null || y.right == null) {
            return;
        }
        Node x = y.right;
        Node w = y.parent;
        
        y.right = x.left;
        if (y.right != null) {
            y.right.parent = y;
        }
        
        x.left = y;
        y.parent = x;
        
        if (w != null) {
            if (w.right == y) {
                w.right = x;  // x becomes the right child of w
            } else {
                w.left = x;  // x becomes the left child of w
            }
            x.parent = w;  // update x's parent to w
        } else { // y is the root
            root = x;
            x.parent = null;
        }
    }
    
    public void doubleRotateFromLeft(Node y) {
        if (y == null || y.left == null || y.left.right == null) {
            return;
        }
        
        Node x = y.left;
        Node z = x.right;
        Node w = y.parent;
        
        // Step 1: Right rotation on y.left (x)
        x.right = z.left;
        if (x.right != null) {
            x.right.parent = x; // Update parent reference of the moved subtree
        }
        
        z.left = x;
        x.parent = z;
        
        // Step 2: Left rotation on y
        y.left = z.right;
        if (y.left != null) {
            y.left.parent = y; // Update parent reference
        }
        z.right = y;
        y.parent = z;

        // Update parent references
        if (w != null) {
            if (w.left == y) {
                w.left = z;
            } else {
                w.right = z;
            }
            z.parent = w;
        } else {
            root = z;
            z.parent = null;
        }
    }

    public void doubleRotateFromRight(Node y) {
        if (y == null || y.right == null || y.right.left == null) {
            return;
        }

        Node x = y.right;  // Right child of y
        Node z = x.left;   // Left child of x (this will become the new root of this subtree)
        Node w = y.parent; // Parent of y

        // Step 1: Left rotation on y.right (x)
        x.left = z.right;
        if (x.left != null) {
            x.left.parent = x; // Update parent reference of the moved subtree
        }

        z.right = x;
        x.parent = z;

        // Step 2: Right rotation on y
        y.right = z.left;
        if (y.right != null) {
            y.right.parent = y; // Update parent reference
        }

        z.left = y;
        y.parent = z;

        // Update parent references
        if (w != null) {
            if (w.right == y) {
                w.right = z;
            } else {
                w.left = z;
            }
            z.parent = w;
        } else {
            root = z;
            z.parent = null;
        }
    }

    public static void rebalance(AVLTree tree, Node node) {
        if (node == null) return;
        int balanceFactor = height(node.left) - height(node.right); // Calculate balanceFactor
        if (Math.abs(balanceFactor) > 1){                          // Use balanceFactor to check if unbalanced?
            if (balanceFactor > 0){ // Use balanceFactor to check if left heavy?
                if (height(node.left.left) >= height(node.left.right)){ //Outer
                    System.out.println("Perform SingleRotationFromLeft(Node " + node.key + ")");
                    tree.singleRotateFromLeft(node);
                }else{ //Inner
                    System.out.println("Perform DoubleRotationFromLeft(Node " + node.key + ")");
                    tree.doubleRotateFromLeft(node);
                }
            }else{ //right heavy
                if (height(node.right.right) >= height(node.right.left)){ //Outer
                    System.out.println("Perform SingleRotationFromRight(Node " + node.key + ")");
                    tree.singleRotateFromRight(node);
                }else{ //Inner
                    System.out.println("Perform DoubleRotationFromRight(Node " + node.key + ")");
                    tree.doubleRotateFromRight(node);   
                }
            }
        }
    }
    
    // Fix this function to have the rebalancing feature
    // There should be rebalance() function calling somewhere in the code
    public static void insertKey(AVLTree tree, Node node, int key) {
        if (key == node.key) {
            System.out.println("Duplicated key:" + key);
            return;
        }else if (key < node.key) {//Go left
            if (node.left == null) {
                node.left = new Node(key);
                node.left.parent = node;
                rebalance(tree, node);
            }else {
                insertKey(tree, node.left, key);
                rebalance(tree, node);
            }
        }else{  // Go right
            if (node.right == null) {
                node.right = new Node(key);
                node.right.parent = node;
                rebalance(tree, node);
            }else {
                insertKey(tree, node.right, key);
                rebalance(tree, node);
            }
        }
    }
    
    // This function is complete, no need to edit
    public void insertKey(int key) {
        if (root == null) {
            root = new Node(key);
        } else {
            insertKey(this, root, key);
        }
    }
    
    // This function is complete, no need to edit
    public Node findKey(int search_key) {
        return Main.findKey(root, search_key);
    }

    // Use this function to check the node height
    // This function is complete, no need to edit
    public static int height(Node node){
        if (node == null)
            return -1;
        else
            return 1 + Math.max(height(node.left), height(node.right));
    }
}
